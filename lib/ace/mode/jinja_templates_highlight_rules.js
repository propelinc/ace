/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from /home/ram/src/freshebt-server/jinja.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var HtmlHighlightRules = require("./html_highlight_rules").HtmlHighlightRules;

var JinjaTemplatesHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used
    HtmlHighlightRules.call(this);

    var startRules = [{
        token: [
            "entity.other.jinja.delimiter.tag",
            "comment.block.jinja.raw",
            "keyword.control.jinja",
            "comment.block.jinja.raw",
            "entity.other.jinja.delimiter.tag"
        ],
        regex: /({%)(\s*)(raw)(\s*)(%})/,
        push: [{
            token: [
                "entity.other.jinja.delimiter.tag",
                "comment.block.jinja.raw",
                "keyword.control.jinja",
                "comment.block.jinja.raw",
                "entity.other.jinja.delimiter.tag"
            ],
            regex: /({%)(\s*)(endraw)(\s*)(%})/,
            next: "pop"
        }, {
            defaultToken: "comment.block.jinja.raw"
        }]
    }, {
        token: "entity.other.jinja.delimiter.comment",
        regex: /{#-?/,
        push: [{
            token: "entity.other.jinja.delimiter.comment",
            regex: /-?#}/,
            next: "pop"
        }, {
            defaultToken: "comment.block.jinja"
        }]
    }, {
        token: "entity.other.jinja.delimiter.variable",
        regex: /{{-?/,
        push: [{
            token: "entity.other.jinja.delimiter.variable",
            regex: /-?}}/,
            next: "pop"
        }, {
            include: "jinja-expression"
        }, {
            defaultToken: "meta.scope.jinja.variable"
        }]
    }, {
        token: "entity.other.jinja.delimiter.tag",
        regex: /{%-?/,
        push: [{
            token: "entity.other.jinja.delimiter.tag",
            regex: /-?%}/,
            next: "pop"
        }, {
            include: "jinja-expression"
        }, {
            defaultToken: "meta.scope.jinja.tag"
        }]
    }];

    for (var key in this.$rules)
        this.$rules[key].unshift.apply(this.$rules[key], startRules);

    Object.assign(this.$rules, {
        "jinja-escaped_char": [{
            token: "constant.character.escape.hex.jinja",
            regex: /\\x[0-9A-F]{2}/
        }],
        "jinja-escaped_unicode_char": [{
            token: [
                "constant.character.escape.unicode.16-bit-hex.jinja",
                "constant.character.escape.unicode.32-bit-hex.jinja",
                "constant.character.escape.unicode.name.jinja"
            ],
            regex: /(\\U[0-9A-Fa-f]{8})|(\\u[0-9A-Fa-f]{4})|(\\N\{[a-zA-Z ]+\})/
        }],
        "jinja-expression": [{
            token: [
                "text",
                "keyword.control.jinja",
                "text",
                "variable.other.jinja.block"
            ],
            regex: /(\s*\b)(block)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)\b/
        }, {
            token: [
                "text",
                "keyword.control.jinja",
                "text",
                "variable.other.jinja.filter"
            ],
            regex: /(\s*\b)(filter)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)\b/
        }, {
            token: [
                "text",
                "keyword.control.jinja",
                "text",
                "variable.other.jinja.test"
            ],
            regex: /(\s*\b)(is)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)\b/
        }, {
            token: ["text", "keyword.control.jinja"],
            regex: /(?<=\{\%-|\{\%)(\s*\b)([a-zA-Z_][a-zA-Z0-9_]*)\b(?!\s*[,=])/
        }, {
            token: "keyword.control.jinja",
            regex: /\b(?:and|else|if|in|import|not|or|recursive|with(?:out)?\s+context)\b/
        }, {
            token: "constant.language.jinja",
            regex: /\b(?:true|false|none)\b/
        }, {
            token: "variable.language.jinja",
            regex: /\b(?:loop|super|self|varargs|kwargs)\b/
        }, {
            token: "variable.other.jinja",
            regex: /[a-zA-Z_][a-zA-Z0-9_]*/
        }, {
            token: "keyword.operator.arithmetic.jinja",
            regex: /\+|\-|\*\*|\*|\/\/|\/|%/
        }, {
            token: [
                "punctuation.other.jinja",
                "variable.other.jinja.filter"
            ],
            regex: /(\|)([a-zA-Z_][a-zA-Z0-9_]*)/
        }, {
            token: [
                "punctuation.other.jinja",
                "variable.other.jinja.attribute"
            ],
            regex: /(\.)([a-zA-Z_][a-zA-Z0-9_]*)/
        }, {
            token: "punctuation.other.jinja",
            regex: /\[/,
            push: [{
                token: "punctuation.other.jinja",
                regex: /\]/,
                next: "pop"
            }, {
                include: "jinja-expression"
            }]
        }, {
            token: "punctuation.other.jinja",
            regex: /\(/,
            push: [{
                token: "punctuation.other.jinja",
                regex: /\)/,
                next: "pop"
            }, {
                include: "jinja-expression"
            }]
        }, {
            token: "punctuation.other.jinja",
            regex: /\{/,
            push: [{
                token: "punctuation.other.jinja",
                regex: /\}/,
                next: "pop"
            }, {
                include: "jinja-expression"
            }]
        }, {
            token: "punctuation.other.jinja",
            regex: /\.|:|\||,/
        }, {
            token: "keyword.operator.comparison.jinja",
            regex: /==|<=|=>|<|>|!=/
        }, {
            token: "keyword.operator.assignment.jinja",
            regex: /=/
        }, {
            token: "punctuation.definition.string.begin.jinja",
            regex: /"/,
            push: [{
                token: "punctuation.definition.string.end.jinja",
                regex: /"/,
                next: "pop"
            }, {
                include: "jinja-string"
            }, {
                defaultToken: "string.quoted.double.jinja"
            }]
        }, {
            token: "punctuation.definition.string.begin.jinja",
            regex: /'/,
            push: [{
                token: "punctuation.definition.string.end.jinja",
                regex: /'/,
                next: "pop"
            }, {
                include: "jinja-string"
            }, {
                defaultToken: "string.quoted.single.jinja"
            }]
        }, {
            token: "punctuation.definition.regexp.begin.jinja",
            regex: /@\//,
            push: [{
                token: "punctuation.definition.regexp.end.jinja",
                regex: /\//,
                next: "pop"
            }, {
                include: "jinja-simple_escapes"
            }, {
                defaultToken: "string.regexp.jinja"
            }]
        }],
        "jinja-simple_escapes": [{
            token: [
                "constant.character.escape.newline.jinja",
                "constant.character.escape.backlash.jinja",
                "constant.character.escape.double-quote.jinja",
                "constant.character.escape.single-quote.jinja",
                "constant.character.escape.bell.jinja",
                "constant.character.escape.backspace.jinja",
                "constant.character.escape.formfeed.jinja",
                "constant.character.escape.linefeed.jinja",
                "constant.character.escape.return.jinja",
                "constant.character.escape.tab.jinja",
                "constant.character.escape.vertical-tab.jinja"
            ],
            regex: /(\\$)|(\\\\)|(\\\")|(\\')|(\\a)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\v)/
        }],
        "jinja-string": [{
            include: "jinja-simple_escapes"
        }, {
            include: "jinja-escaped_char"
        }, {
            include: "jinja-escaped_unicode_char"
        }]
    });
    
    this.normalizeRules();
};

JinjaTemplatesHighlightRules.metaData = {
    fileTypes: [],
    foldingStartMarker: "({%\\s*(block|filter|for|if|macro|raw))",
    foldingStopMarker: "({%\\s*(endblock|endfilter|endfor|endif|endmacro|endraw)\\s*%})",
    name: "Jinja Templates",
    scopeName: "source.jinja"
}


oop.inherits(JinjaTemplatesHighlightRules, HtmlHighlightRules);

exports.JinjaTemplatesHighlightRules = JinjaTemplatesHighlightRules;
});